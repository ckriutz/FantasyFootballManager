@page "/player/{id:int}"
@inject IHttpClientFactory ClientFactory;
@inject Data.FootballPlayerService fps;
@using System.Text.Json;

@if (getPlayerError == true)
{
    <p>Unable to get players from the API This is bad. ðŸ‘Ž</p>
}
@if (shouldRender == false)
{
    <div class="row px-3">
        <div class="col-md-4 p-3"></div>
        <div class="col-md-4 p-3">
            <RadzenCard>
                <h4 class="mb-4">Getting Player @Id from the API</h4>
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            </RadzenCard>
        </div>
        <div class="col-md-4 p-3"></div>
    </div>
}
else
{
    <div class="container">
        <div class="row user-menu-container">
            <div class="col-md-3">
                <img src="@player.PlayerHeadshotURL" class="img-thumbnail">
                <h3 style="padding-top:10px;">
                    @if (!player.IsAvailable && !player.IsOnMyTeam)
                    {
                        <button class="btn btn-primary" @onclick="@(async e => SetPlayerAvailableAsync(player))">Return</button>
                    }

                    @if(player.IsOnMyTeam)
                    {
                        <button class="btn btn-primary" @onclick="@(async e => SetPlayerAvailableAsync(player))">Reset</button>
                    }
                    @if(player.IsAvailable)
                    {
                        <button class="btn btn-warning" @onclick="@(async e => SetPlayerUnavailableAsync(player))">Taken</button>
                        <button class="btn btn-success" @onclick="@(async e => AssignPlayerToMyTeamAsync(player))">Add</button>
                    }
                </h3>       
            </div>
            <div class="col-md-9">
                <h1 class="display-4"><RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@player.Tier.ToString()" /> @player.Name | @player.Position | @player.Team</h1>
                <h3><RadzenBadge BadgeStyle="BadgeStyle.Light" Text="@player.Bye.ToString()" /></h3>
                <div class="row">
                    <div class="col-md-4">
                        <RadzenCard Style="height:150px;">
                            <p class="lead">Projected Points</p>
                            <h1 class="display-4 text-center">@player.ProjectedFantasyPoints</h1>
                        </RadzenCard>
                    </div>
                    <div class="col-md-4">
                        <RadzenCard Style="height:150px;">
                            <p class="lead">ADP</p>
                            <h1 class="display-4 text-center">@String.Format("{0:0.00}",player.ADP)</h1>
                        </RadzenCard>
                    </div>
                    <div class="col-md-4">
                        <RadzenCard Style="height:150px;">
                            <p class="lead">Auction Value</p>
                            <h1 class="display-4 text-center">@player.AuctionValue</h1>
                        </RadzenCard>
                    </div>
                </div>
            </div>
        </div>

    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }
    public Data.FootballPlayer player;
    private bool getPlayerError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        // I basically took this right from: https://docs.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-6.0&pivots=server
        var request = new HttpRequestMessage(HttpMethod.Get, $"http://localhost:7071/api/player/{Id}");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            player = await JsonSerializer.DeserializeAsync<Data.FootballPlayer>(responseStream);
        }
        else
        {
            getPlayerError = true;
        }

        shouldRender = true;
    }

    private async Task<bool> SetPlayerAvailableAsync(Data.FootballPlayer player)
    {
        player.IsAvailable = true;
        player.IsOnMyTeam = false;
        var status = await fps.UpdatePlayer(player);
        return status;
    }

    private async Task<bool> SetPlayerUnavailableAsync(Data.FootballPlayer player)
    {
        player.IsAvailable = false;
        player.IsOnMyTeam = false;
        var status = await fps.UpdatePlayer(player);
        return status;
    }

    private async Task<bool> AssignPlayerToMyTeamAsync(Data.FootballPlayer player)
    {
        player.IsOnMyTeam = true;
        player.IsAvailable = false;
        var status = await fps.UpdatePlayer(player);
        return status;
    }
}