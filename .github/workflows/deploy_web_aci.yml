name: Build and Deploy the Web to ACI

on:
  push:
      branches: [main]

jobs:
  build:
    runs-on: ubuntu-22.04
    defaults:
        run:
          working-directory: FantasyFootballManager.Web
    steps:
    # Lets check out everything and do a build. If this doesn't work, no sense in doing the rest.
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build -c Release --no-restore
      # Okay! We seem to be good, lets create a container.
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: 'Build and push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/fantasyfootballmamagerweb:${{ github.sha }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/fantasyfootballmamagerweb:${{ github.sha }}
      # Now that we have that container, lets deploy into ACI.
    - name: 'Deploy to Azure Container Instances'
      uses: 'azure/aci-deploy@v1'
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
        image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/fantasyfootballmamagerweb:${{ github.sha }}
        registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secure-environment-variables: apiUrl=${{ secrets.API_URL }} code=${{ secrets.CODE }}
        name: fantasyfootballmanager-web
        location: 'east us'
        ports: '5221'